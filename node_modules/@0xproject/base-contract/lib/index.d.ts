import { TxData, TxDataPayable } from '@0xproject/types';
import { Web3Wrapper } from '@0xproject/web3-wrapper';
import * as ethersContracts from 'ethers-contracts';
import * as Web3 from 'web3';
export declare class BaseContract {
    protected _ethersInterface: ethersContracts.Interface;
    protected _web3Wrapper: Web3Wrapper;
    abi: Web3.ContractAbi;
    address: string;
    protected static _transformABIData(abis: Web3.DataItem[], values: any[], transformation: (type: string, value: any) => any): any;
    protected static _lowercaseAddress(type: string, value: string): string;
    protected static _bigNumberToString(type: string, value: string): string;
    private static _transformTypedData(type, values, transformation);
    protected _applyDefaultsToTxDataAsync<T extends Partial<TxData | TxDataPayable>>(txData: T, estimateGasAsync?: (txData: T) => Promise<number>): Promise<TxData>;
    constructor(web3Wrapper: Web3Wrapper, abi: Web3.ContractAbi, address: string);
}
