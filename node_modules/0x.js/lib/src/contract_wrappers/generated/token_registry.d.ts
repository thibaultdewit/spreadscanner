/**
 * This file is auto-generated using abi-gen. Don't edit directly.
 * Templates can be found at https://github.com/0xProject/0x-monorepo/tree/development/packages/contract_templates.
 */
import { BaseContract } from '@0xproject/base-contract';
import { TxData } from '@0xproject/types';
import { BigNumber } from '@0xproject/utils';
import { Web3Wrapper } from '@0xproject/web3-wrapper';
import * as Web3 from 'web3';
export declare type TokenRegistryContractEventArgs = LogAddTokenContractEventArgs | LogRemoveTokenContractEventArgs | LogTokenNameChangeContractEventArgs | LogTokenSymbolChangeContractEventArgs | LogTokenIpfsHashChangeContractEventArgs | LogTokenSwarmHashChangeContractEventArgs;
export declare enum TokenRegistryEvents {
    LogAddToken = "LogAddToken",
    LogRemoveToken = "LogRemoveToken",
    LogTokenNameChange = "LogTokenNameChange",
    LogTokenSymbolChange = "LogTokenSymbolChange",
    LogTokenIpfsHashChange = "LogTokenIpfsHashChange",
    LogTokenSwarmHashChange = "LogTokenSwarmHashChange",
}
export interface LogAddTokenContractEventArgs {
    token: string;
    name: string;
    symbol: string;
    decimals: number;
    ipfsHash: string;
    swarmHash: string;
}
export interface LogRemoveTokenContractEventArgs {
    token: string;
    name: string;
    symbol: string;
    decimals: number;
    ipfsHash: string;
    swarmHash: string;
}
export interface LogTokenNameChangeContractEventArgs {
    token: string;
    oldName: string;
    newName: string;
}
export interface LogTokenSymbolChangeContractEventArgs {
    token: string;
    oldSymbol: string;
    newSymbol: string;
}
export interface LogTokenIpfsHashChangeContractEventArgs {
    token: string;
    oldIpfsHash: string;
    newIpfsHash: string;
}
export interface LogTokenSwarmHashChangeContractEventArgs {
    token: string;
    oldSwarmHash: string;
    newSwarmHash: string;
}
export declare class TokenRegistryContract extends BaseContract {
    removeToken: {
        sendTransactionAsync(_token: string, _index: BigNumber, txData?: TxData): Promise<string>;
        estimateGasAsync(_token: string, _index: BigNumber, txData?: TxData): Promise<number>;
        getABIEncodedTransactionData(_token: string, _index: BigNumber, txData?: TxData): string;
    };
    getTokenAddressByName: {
        callAsync(_name: string, txData?: TxData, defaultBlock?: number | "pending" | "earliest" | "latest" | undefined): Promise<string>;
    };
    getTokenAddressBySymbol: {
        callAsync(_symbol: string, txData?: TxData, defaultBlock?: number | "pending" | "earliest" | "latest" | undefined): Promise<string>;
    };
    setTokenSwarmHash: {
        sendTransactionAsync(_token: string, _swarmHash: string, txData?: TxData): Promise<string>;
        estimateGasAsync(_token: string, _swarmHash: string, txData?: TxData): Promise<number>;
        getABIEncodedTransactionData(_token: string, _swarmHash: string, txData?: TxData): string;
    };
    getTokenMetaData: {
        callAsync(_token: string, txData?: TxData, defaultBlock?: number | "pending" | "earliest" | "latest" | undefined): Promise<[string, string, string, number, string, string]>;
    };
    owner: {
        callAsync(txData?: TxData, defaultBlock?: number | "pending" | "earliest" | "latest" | undefined): Promise<string>;
    };
    addToken: {
        sendTransactionAsync(_token: string, _name: string, _symbol: string, _decimals: number | BigNumber, _ipfsHash: string, _swarmHash: string, txData?: TxData): Promise<string>;
        estimateGasAsync(_token: string, _name: string, _symbol: string, _decimals: number | BigNumber, _ipfsHash: string, _swarmHash: string, txData?: TxData): Promise<number>;
        getABIEncodedTransactionData(_token: string, _name: string, _symbol: string, _decimals: number | BigNumber, _ipfsHash: string, _swarmHash: string, txData?: TxData): string;
    };
    setTokenName: {
        sendTransactionAsync(_token: string, _name: string, txData?: TxData): Promise<string>;
        estimateGasAsync(_token: string, _name: string, txData?: TxData): Promise<number>;
        getABIEncodedTransactionData(_token: string, _name: string, txData?: TxData): string;
    };
    tokens: {
        callAsync(index_0: string, txData?: TxData, defaultBlock?: number | "pending" | "earliest" | "latest" | undefined): Promise<[string, string, string, number, string, string]>;
    };
    tokenAddresses: {
        callAsync(index_0: BigNumber, txData?: TxData, defaultBlock?: number | "pending" | "earliest" | "latest" | undefined): Promise<string>;
    };
    getTokenByName: {
        callAsync(_name: string, txData?: TxData, defaultBlock?: number | "pending" | "earliest" | "latest" | undefined): Promise<[string, string, string, number, string, string]>;
    };
    getTokenAddresses: {
        callAsync(txData?: TxData, defaultBlock?: number | "pending" | "earliest" | "latest" | undefined): Promise<string[]>;
    };
    setTokenIpfsHash: {
        sendTransactionAsync(_token: string, _ipfsHash: string, txData?: TxData): Promise<string>;
        estimateGasAsync(_token: string, _ipfsHash: string, txData?: TxData): Promise<number>;
        getABIEncodedTransactionData(_token: string, _ipfsHash: string, txData?: TxData): string;
    };
    getTokenBySymbol: {
        callAsync(_symbol: string, txData?: TxData, defaultBlock?: number | "pending" | "earliest" | "latest" | undefined): Promise<[string, string, string, number, string, string]>;
    };
    setTokenSymbol: {
        sendTransactionAsync(_token: string, _symbol: string, txData?: TxData): Promise<string>;
        estimateGasAsync(_token: string, _symbol: string, txData?: TxData): Promise<number>;
        getABIEncodedTransactionData(_token: string, _symbol: string, txData?: TxData): string;
    };
    transferOwnership: {
        sendTransactionAsync(newOwner: string, txData?: TxData): Promise<string>;
        estimateGasAsync(newOwner: string, txData?: TxData): Promise<number>;
        getABIEncodedTransactionData(newOwner: string, txData?: TxData): string;
    };
    constructor(web3Wrapper: Web3Wrapper, abi: Web3.ContractAbi, address: string);
}
