import { DDEXApi } from '../api'
import { OnBookChangeEventJson } from "../types"
import * as io from 'socket.io-client'
import BigNumber from "bignumber.js";
import { RBTree, Comparator } from "bintrees"

import { BookJson } from "../types"
import * as _ from "lodash"
import { Token } from './token';

export class OnBookChangeEvent {
  sequence: number
  type: string
  price: BigNumber
  changedAmount: BigNumber
  orderId: string

  static fromJSON(onBookChangeJson: OnBookChangeEventJson): OnBookChangeEvent {
    const event = new OnBookChangeEvent
    event.sequence = onBookChangeJson.sequence
    event.orderId = onBookChangeJson.orderId
    event.type = onBookChangeJson.type
    event.price = new BigNumber(onBookChangeJson.price)
    event.changedAmount = new BigNumber(onBookChangeJson.changedAmount)
    return event
  }
}

export class OrderBookSnapshot {
  sequence: number
  pair: string
  bids: BigNumber[][]
  asks: BigNumber[][]

  static fromJSON(bookJson: BookJson): OrderBookSnapshot {
    const book = new OrderBookSnapshot()
    book.sequence = bookJson.sequence
    book.pair = bookJson.pair
    book.bids = []
    book.asks = []

    _.each(bookJson.bids, ([price, amount]) => {
      book.bids.push([new BigNumber(price), new BigNumber(amount)])
    })

    _.each(bookJson.asks, ([price, amount]) => {
      book.asks.push([new BigNumber(price), new BigNumber(amount)])
    })

    return book
  }
}

export interface PriceLevel {
  price: BigNumber
  amount: BigNumber
}

const priceLevelSortAsc = (a: PriceLevel, b: PriceLevel) => a.price.gt(b.price) ? 1 : (a.price.eq(b.price) ? 0 : -1)
const priceLevelSortDesc = (a: PriceLevel, b: PriceLevel) => a.price.gt(b.price) ? -1 : (a.price.eq(b.price) ? 0 : 1)

export class OrderBook {
  public token: Token
  public sequence: number = -1

  private api: DDEXApi
  private socket: SocketIOClient.Socket
  public bids: RBTree<PriceLevel> = new RBTree(priceLevelSortAsc)
  public asks: RBTree<PriceLevel> = new RBTree(priceLevelSortDesc)
  private eventQueue: OnBookChangeEvent[]

  constructor(token: Token, api: DDEXApi) {
    this.api = api
    this.token = token
  }

  async init(): Promise<void> {
    this.eventQueue = []
    this.initSocket()

    const snapshot: OrderBookSnapshot = await this.api.getBook(this.token.pair())

    snapshot.bids.forEach(([price, amount]) => {
      this.onChange({ sequence: snapshot.sequence, type: 'bids', price: new BigNumber(price), changedAmount: new BigNumber(amount), orderId: "" })
    })

    snapshot.asks.forEach(([price, amount]) => {
      this.onChange({ sequence: snapshot.sequence, type: 'asks', price: new BigNumber(price), changedAmount: new BigNumber(amount), orderId: "" })
    })

    this.sequence = snapshot.sequence

    while (this.eventQueue.length > 0) {
      const event: OnBookChangeEvent = this.eventQueue[0]
      this.eventQueue.shift()

      if (event.sequence <= this.sequence) continue
      if (event.sequence - 1 !== this.sequence) {
        // console.log("error happened!!!!") // TODO
        break
      }

      // console.log("onBookChange Pending event dispatched:", event)
      this.onChange(event)
    }

    // this.print()
  }

  private initSocket(): void {
    const socket = io(this.api.serverURL)
    this.socket = socket

    socket.on('connect', () => {
      socket.emit('changeTradingPair', this.token.pair());
    })

    socket.on("onBookChange", (eventJson: OnBookChangeEventJson) => {
      const event = OnBookChangeEvent.fromJSON(eventJson)
      // console.log(eventJson, event.sequence, this.sequence)
      if (this.sequence === -1) {
        this.eventQueue.push(event)
        return
      }

      if (this.sequence !== event.sequence - 1) {
        this.socket.disconnect()
        this.init()
        return
      }

      this.onChange(event)
    })
  }

  public onChange(event: OnBookChangeEvent): void {
    const tree = (event.type === "bids") ? this.bids : this.asks
    let priceLevel = tree.find({ price: event.price, amount: new BigNumber('0') })

    if (!priceLevel) {
      priceLevel = { price: event.price, amount: new BigNumber('0') }
      tree.insert(priceLevel)
    }

    priceLevel.amount = priceLevel.amount.add(event.changedAmount)

    if (priceLevel.amount.lte('0')) {
      tree.remove(priceLevel)
    }

    this.sequence = event.sequence
  }

  public print(): void {
    console.log('---asks---')
    this.asks.each((priceLevel) => {
      console.log(`${priceLevel.price.toFixed(4)} ${priceLevel.amount.toFixed(4)}`)
    })
    console.log('---bids---')
    this.bids.each((priceLevel) => {
      console.log(`${priceLevel.price.toFixed(4)} ${priceLevel.amount.toFixed(4)}`)
    })
    console.log('----------')
  }
}
