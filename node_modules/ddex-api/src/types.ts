import { ZeroEx, SignedOrder } from '0x.js'
import { BigNumber } from 'bignumber.js';
import * as Web3 from "web3"

export interface DDEXApiParams {
  account?: string
  serverURL: string
  apiVersion?: string
  web3?: Web3
  zeroEx?: ZeroEx
  relayer: string
  feeRate?: string
}

export interface CreateOrderResponse {
  ok: boolean,
  order: OrderJson,
  error?: string,
}

export interface CancelOrderResponse {
  ok: boolean
}

export interface GetOrdersResponse {
  ok: boolean,
  error?: string,
  orders: OrderJson[],
}

export interface GetTradesResponse {
  ok: boolean,
  trades: TradeJson[]
}

export interface GetAccountResponse {
  ok: boolean
  account: AccountJson
}

export interface GetServerStatusResponse {
  ok: boolean
  maximumEtherSize: string
  maximumTokensAmountSize: object
  tokenAllowances: object
}

export interface GetTickersResponse {
  ok: boolean
  tickers: TickerJson[]
}

export enum Side {
  BUY = 'buy',
  SELL = 'sell',
}

export interface GetBookResponse {
  ok: boolean,
  book: BookJson
}

export declare enum SrderStatus {
  PENDING = "pending",
  CANCELED = 'canceled',
  FULL_FILLED = "full filled",
}

export interface BookJson {
  sequence: number
  pair: string
  bids: string[][]
  asks: string[][]
}

export interface TickerJson {
  pair: string
  lastPriceIncrease: string
  lastPrice?: string
  price24h?: string
  amount24h: string
  baseTokenVolume24h: string
}

export interface AnnouncementJson {
  id: number
  title: string
  content: string
  link: string
  locale: string
  createdAt: string
  updatedAt: string
}

export interface AccountJson {
  id: string
  lockedBalances: LockedBalancesJson
}

export interface LockedBalancesJson {
  [key: string]: string
}

export interface LockedBalances {
  [key: string]: BigNumber
}

export interface OrderJson {
  id: string,
  json: {
    maker: string,
    taker: string,
    makerFee: string,
    takerFee: string,
    makerTokenAmount: string,
    takerTokenAmount: string,
    makerTokenAddress: string,
    takerTokenAddress: string,
    salt: string,
    exchangeContractAddress: string,
    feeRecipient: string,
    expirationUnixTimestampSec: string
  },
  pair: string
  status: SrderStatus
  fee: string
  amount: string
  availableAmount: string
  pendingAmount: string
  canceledAmount: string
  confirmedAmount: string
  price: string
  side: string
  account: string
  createdAt: string
}

export interface TokenJson {
  id: string,
  name: string,
  symbol: string,
  address: string,
  decimals: number,
  pricePrecision: number,
  priceDecimals: number,
  amountDecimals: number,
  minimumAmountSize: string,
}

export interface TradeJson {
  id: string,
  maker: string,
  taker: string,
  amount: string,
  price: string,
  takerPrice: string,
  feeAmount: string,
  buyer: string,
  seller: string,
  pair: string,
  executedAt: string,
  status: string,
  createdAt: string,
  transactionId: string
}

export interface CreateOrderParams {
  orderHash: string
  signedOrder: SignedOrder
  price: string
  side: string
  amount: string
  pair: string
  fee: BigNumber
  feeAmount: BigNumber
}

export interface GetTokensResponse {
  ok: boolean
  tokens: TokenJson[]
}

export interface OnBookChangeEventJson {
  sequence: number
  orderId: string
  type: string
  price: string
  changedAmount: string
}

export interface CreateCommonTransactionResponse {
  ok: boolean,
  transaction: CommonTransactionJson
}

export interface GetAnnouncementsReponse {
  ok: boolean,
  announcements: AnnouncementJson[]
}

export interface GetCommonTransactionsResponse {
  ok: boolean,
  transactions: CommonTransactionJson[]
}

export interface CommonTransactionJson {
  id: string
  type: string
  account: string
  status: string
  data: object,
  createdAt: string
}

export interface TradeLimitResponseJson {
  minimumFeeAmount: string,
  maximumEtherSize: string,
}

export interface TradeLimit {
  minimumFeeAmount: BigNumber,
  maximumEtherSize: BigNumber,
}