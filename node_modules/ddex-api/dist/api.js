"use strict";
var __assign = (this && this.__assign) || Object.assign || function(t) {
    for (var s, i = 1, n = arguments.length; i < n; i++) {
        s = arguments[i];
        for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
            t[p] = s[p];
    }
    return t;
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = y[op[0] & 2 ? "return" : op[0] ? "throw" : "next"]) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [0, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
Object.defineProperty(exports, "__esModule", { value: true });
var axios_1 = require("axios");
var bignumber_js_1 = require("bignumber.js");
var _0x_js_1 = require("0x.js");
var models_1 = require("./models");
bignumber_js_1.default.config({ EXPONENTIAL_AT: 1000 });
var DDEXApi = /** @class */ (function () {
    function DDEXApi(_a) {
        var account = _a.account, serverURL = _a.serverURL, apiVersion = _a.apiVersion, zeroEx = _a.zeroEx, relayer = _a.relayer, feeRate = _a.feeRate, web3 = _a.web3;
        this.serverURL = serverURL;
        this.url = serverURL + "/api/" + (apiVersion || "v1");
        if (account) {
            this.account = account;
        }
        if (zeroEx) {
            this.zeroEx = zeroEx;
        }
        if (web3) {
            this.web3 = web3;
        }
        this.relayer = relayer;
        this.feeRate = new bignumber_js_1.default(feeRate || "0.003");
        this.shouldAddPersonalMessagePrefix = false;
    }
    DDEXApi.prototype.constructSignedOrder = function (makerTokenAddress, makerTokenAmount, takerTokenAddress, takerTokenAmount) {
        return __awaiter(this, void 0, void 0, function () {
            var feeRecipient, order, orderHash, signedOrder, _a, _b;
            return __generator(this, function (_c) {
                switch (_c.label) {
                    case 0:
                        feeRecipient = "0xe269e891a2ec8585a378882ffa531141205e92e9";
                        order = {
                            exchangeContractAddress: this.zeroEx.exchange.getContractAddress(),
                            expirationUnixTimestampSec: new bignumber_js_1.default(Math.floor((new Date).getTime() / 1000) + 3600 * 24 * 365 * 1000),
                            feeRecipient: feeRecipient,
                            maker: this.account,
                            makerFee: new bignumber_js_1.default("0"),
                            salt: _0x_js_1.ZeroEx.generatePseudoRandomSalt(),
                            taker: this.relayer,
                            takerFee: new bignumber_js_1.default("0"),
                            makerTokenAddress: makerTokenAddress,
                            makerTokenAmount: makerTokenAmount,
                            takerTokenAddress: takerTokenAddress,
                            takerTokenAmount: takerTokenAmount,
                        };
                        orderHash = _0x_js_1.ZeroEx.getOrderHashHex(order);
                        _a = [{}, order];
                        _b = {};
                        return [4 /*yield*/, this.zeroEx.signOrderHashAsync(orderHash, this.account, this.shouldAddPersonalMessagePrefix)];
                    case 1:
                        signedOrder = __assign.apply(void 0, _a.concat([(_b.ecSignature = _c.sent(), _b)]));
                        return [2 /*return*/, {
                                signedOrder: signedOrder,
                                orderHash: orderHash
                            }];
                }
            });
        });
    };
    DDEXApi.prototype.buildOrder = function (price, amount, side, currentTradeToken, feeAmount) {
        return __awaiter(this, void 0, void 0, function () {
            var _feeAmount, _a, _price, _amount, etherTokenAddress, makerTokenAmount, makerTokenAddress, takerTokenAmount, takerTokenAddress, _b, signedOrder, orderHash, pair;
            return __generator(this, function (_c) {
                switch (_c.label) {
                    case 0:
                        if (!this.zeroEx) {
                            throw new Error("create order need zeroEx");
                        }
                        if (!feeAmount) return [3 /*break*/, 1];
                        _a = new bignumber_js_1.default(feeAmount);
                        return [3 /*break*/, 3];
                    case 1: return [4 /*yield*/, this.calculateFee(price, amount)];
                    case 2:
                        _a = _c.sent();
                        _c.label = 3;
                    case 3:
                        _feeAmount = _a;
                        _price = new bignumber_js_1.default(price);
                        _amount = new bignumber_js_1.default(amount);
                        return [4 /*yield*/, this.getEtherToken()];
                    case 4:
                        etherTokenAddress = (_c.sent()).address;
                        if (side == "buy") {
                            makerTokenAmount = _price.mul(_amount).add(_feeAmount).mul(Math.pow(10, 18)).round(0, bignumber_js_1.default.ROUND_DOWN);
                            makerTokenAddress = etherTokenAddress;
                            takerTokenAmount = _amount.mul(Math.pow(10, currentTradeToken.decimals)).round(0, bignumber_js_1.default.ROUND_DOWN);
                            takerTokenAddress = currentTradeToken.address;
                        }
                        else {
                            makerTokenAmount = _amount.mul(Math.pow(10, currentTradeToken.decimals)).round(0, bignumber_js_1.default.ROUND_DOWN);
                            makerTokenAddress = currentTradeToken.address;
                            takerTokenAmount = _price.mul(_amount).sub(_feeAmount).mul(Math.pow(10, 18)).round(0, bignumber_js_1.default.ROUND_DOWN);
                            takerTokenAddress = etherTokenAddress;
                        }
                        return [4 /*yield*/, this.constructSignedOrder(makerTokenAddress, makerTokenAmount, takerTokenAddress, takerTokenAmount)];
                    case 5:
                        _b = _c.sent(), signedOrder = _b.signedOrder, orderHash = _b.orderHash;
                        pair = currentTradeToken.symbol + "-ETH";
                        return [2 /*return*/, {
                                orderHash: orderHash,
                                signedOrder: signedOrder,
                                price: price,
                                side: side,
                                amount: amount,
                                pair: pair,
                                fee: this.feeRate,
                                feeAmount: _feeAmount
                            }];
                }
            });
        });
    };
    DDEXApi.prototype.calculateFee = function (price, amount) {
        return __awaiter(this, void 0, void 0, function () {
            var _a, _b, _c;
            return __generator(this, function (_d) {
                switch (_d.label) {
                    case 0:
                        _b = (_a = bignumber_js_1.default).max;
                        _c = [new bignumber_js_1.default(amount).mul(price).mul(this.feeRate)];
                        return [4 /*yield*/, this.getMinimumFeeAmount()];
                    case 1: return [2 /*return*/, _b.apply(_a, _c.concat([_d.sent()]))];
                }
            });
        });
    };
    DDEXApi.prototype.getMinimumFeeAmount = function () {
        return __awaiter(this, void 0, void 0, function () {
            var _this = this;
            var _a;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        if (this.minimumFeeAmountCache) {
                            return [2 /*return*/, this.minimumFeeAmountCache];
                        }
                        setTimeout(function () {
                            delete _this.minimumFeeAmountCache;
                        }, 30000);
                        _a = this;
                        return [4 /*yield*/, this.getTradeLimit()];
                    case 1:
                        _a.minimumFeeAmountCache = (_b.sent()).minimumFeeAmount;
                        return [2 /*return*/, this.minimumFeeAmountCache];
                }
            });
        });
    };
    DDEXApi.prototype.getTradeLimit = function () {
        return __awaiter(this, void 0, void 0, function () {
            var url, res, result;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        url = this.url + "/status/limit";
                        return [4 /*yield*/, axios_1.default.get(url)];
                    case 1:
                        res = _a.sent();
                        result = {
                            minimumFeeAmount: new bignumber_js_1.default(res.data.minimumFeeAmount),
                            maximumEtherSize: new bignumber_js_1.default(res.data.maximumEtherSize),
                        };
                        return [2 /*return*/, result];
                }
            });
        });
    };
    DDEXApi.loginMessage = function (account) {
        return "DDEX.io\n" + account + "\nLOGIN";
    };
    DDEXApi.prototype.auth = function () {
        return __awaiter(this, void 0, void 0, function () {
            var _this = this;
            var _a;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        _a = this;
                        return [4 /*yield*/, new Promise(function (resolve, reject) {
                                _this.web3.personal.sign(_this.web3.toHex(DDEXApi.loginMessage(_this.account)), _this.account, function (err, signature) {
                                    resolve(signature);
                                });
                            })];
                    case 1:
                        _a.signature = _b.sent();
                        return [2 /*return*/];
                }
            });
        });
    };
    DDEXApi.prototype.getPair = function (token) {
        return token.symbol + "-ETH";
    };
    DDEXApi.prototype.getEtherToken = function () {
        return __awaiter(this, void 0, void 0, function () {
            var tokens;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (this.etherToken) {
                            return [2 /*return*/, this.etherToken];
                        }
                        return [4 /*yield*/, this.getTokens()];
                    case 1:
                        tokens = _a.sent();
                        this.etherToken = tokens.find(function (t) { return t.symbol === "WETH"; });
                        return [2 /*return*/, this.etherToken];
                }
            });
        });
    };
    DDEXApi.prototype.placeOrder = function (dexOrder) {
        return __awaiter(this, void 0, void 0, function () {
            var res;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, axios_1.default.post(this.url + "/orders", dexOrder)];
                    case 1:
                        res = _a.sent();
                        return [2 /*return*/, res.data];
                }
            });
        });
    };
    DDEXApi.prototype.createOrder = function (side, currentTradeToken, price, amount, feeAmount) {
        return __awaiter(this, void 0, void 0, function () {
            var dexOrder;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.buildOrder(price, amount, side, currentTradeToken, feeAmount)];
                    case 1:
                        dexOrder = _a.sent();
                        return [2 /*return*/, this.placeOrder(dexOrder)];
                }
            });
        });
    };
    // need auth
    DDEXApi.prototype.getOrders = function (pair) {
        return __awaiter(this, void 0, void 0, function () {
            var url, res;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        url = this.url + "/orders?account=" + this.account;
                        if (pair) {
                            url = url + "&pair=" + pair;
                        }
                        return [4 /*yield*/, axios_1.default.get(url, {
                                headers: { "DDEX-Signature": this.signature }
                            })];
                    case 1:
                        res = _a.sent();
                        return [2 /*return*/, res.data.orders.map(function (orderJson) { return models_1.Order.fromJSON(orderJson); })];
                }
            });
        });
    };
    // need auth
    DDEXApi.prototype.cancelOrder = function (orderHash) {
        return __awaiter(this, void 0, void 0, function () {
            var res;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, axios_1.default.delete(this.url + "/orders/" + orderHash, {
                            headers: { "DDEX-Signature": this.signature }
                        })];
                    case 1:
                        res = _a.sent();
                        return [2 /*return*/, res.data];
                }
            });
        });
    };
    DDEXApi.prototype.getTokens = function () {
        return __awaiter(this, void 0, void 0, function () {
            var res;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, axios_1.default.get(this.url + "/tokens")];
                    case 1:
                        res = _a.sent();
                        return [2 /*return*/, res.data.tokens.map(function (tokenJson) { return models_1.Token.fromJSON(tokenJson); })];
                }
            });
        });
    };
    DDEXApi.prototype.getTrades = function (pair) {
        return __awaiter(this, void 0, void 0, function () {
            var res;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, axios_1.default.get(this.url + "/trades/" + pair + "?account=" + this.account)];
                    case 1:
                        res = _a.sent();
                        return [2 /*return*/, res.data.trades.map(function (tradeJson) { return models_1.Trade.fromJSON(tradeJson); })];
                }
            });
        });
    };
    DDEXApi.prototype.getAllTrades = function (pair) {
        return __awaiter(this, void 0, void 0, function () {
            var res;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, axios_1.default.get(this.url + "/trades/" + pair)];
                    case 1:
                        res = _a.sent();
                        return [2 /*return*/, res.data.trades.map(function (tradeJson) { return models_1.Trade.fromJSON(tradeJson); })];
                }
            });
        });
    };
    DDEXApi.prototype.getBook = function (pair) {
        return __awaiter(this, void 0, void 0, function () {
            var res;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, axios_1.default.get(this.url + "/books/" + pair)];
                    case 1:
                        res = _a.sent();
                        return [2 /*return*/, models_1.OrderBookSnapshot.fromJSON(res.data.book)];
                }
            });
        });
    };
    DDEXApi.prototype.getTickers = function () {
        return __awaiter(this, void 0, void 0, function () {
            var res;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, axios_1.default.get(this.url + "/tickers")];
                    case 1:
                        res = _a.sent();
                        return [2 /*return*/, res.data.tickers.map(function (tickerJson) { return models_1.Ticker.fromJSON(tickerJson); })];
                }
            });
        });
    };
    DDEXApi.prototype.getServerStatus = function () {
        return __awaiter(this, void 0, void 0, function () {
            var res;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, axios_1.default.get(this.url + "/status")];
                    case 1:
                        res = _a.sent();
                        return [2 /*return*/, res.data];
                }
            });
        });
    };
    // need auth
    DDEXApi.prototype.getAccount = function () {
        return __awaiter(this, void 0, void 0, function () {
            var res;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, axios_1.default.get(this.url + "/accounts/" + this.account, {
                            headers: { "DDEX-Signature": this.signature }
                        })];
                    case 1:
                        res = _a.sent();
                        return [2 /*return*/, models_1.Account.fromJSON(res.data.account)];
                }
            });
        });
    };
    // need auth
    DDEXApi.prototype.createCommonTransaction = function (id, type, data) {
        return __awaiter(this, void 0, void 0, function () {
            var res;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, axios_1.default.post(this.url + "/transactions/" + this.account, { id: id, type: type, data: data }, {
                            headers: { "DDEX-Signature": this.signature }
                        })];
                    case 1:
                        res = _a.sent();
                        return [2 /*return*/, models_1.CommonTransaction.fromJSON(res.data.transaction)];
                }
            });
        });
    };
    DDEXApi.prototype.getCommonTransactions = function () {
        return __awaiter(this, void 0, void 0, function () {
            var res;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, axios_1.default.get(this.url + "/transactions/" + this.account)];
                    case 1:
                        res = _a.sent();
                        return [2 /*return*/, res.data.transactions.map(function (json) { return models_1.CommonTransaction.fromJSON(json); })];
                }
            });
        });
    };
    DDEXApi.prototype.getAnnouncements = function (locale) {
        return __awaiter(this, void 0, void 0, function () {
            var res;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, axios_1.default.get(this.url + "/announcements?locale=" + locale)];
                    case 1:
                        res = _a.sent();
                        return [2 /*return*/, res.data.announcements.map(function (json) { return models_1.Announcement.fromJSON(json); })];
                }
            });
        });
    };
    return DDEXApi;
}());
exports.DDEXApi = DDEXApi;
