"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = y[op[0] & 2 ? "return" : op[0] ? "throw" : "next"]) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [0, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
Object.defineProperty(exports, "__esModule", { value: true });
var io = require("socket.io-client");
var bignumber_js_1 = require("bignumber.js");
var bintrees_1 = require("bintrees");
var _ = require("lodash");
var OnBookChangeEvent = /** @class */ (function () {
    function OnBookChangeEvent() {
    }
    OnBookChangeEvent.fromJSON = function (onBookChangeJson) {
        var event = new OnBookChangeEvent;
        event.sequence = onBookChangeJson.sequence;
        event.orderId = onBookChangeJson.orderId;
        event.type = onBookChangeJson.type;
        event.price = new bignumber_js_1.default(onBookChangeJson.price);
        event.changedAmount = new bignumber_js_1.default(onBookChangeJson.changedAmount);
        return event;
    };
    return OnBookChangeEvent;
}());
exports.OnBookChangeEvent = OnBookChangeEvent;
var OrderBookSnapshot = /** @class */ (function () {
    function OrderBookSnapshot() {
    }
    OrderBookSnapshot.fromJSON = function (bookJson) {
        var book = new OrderBookSnapshot();
        book.sequence = bookJson.sequence;
        book.pair = bookJson.pair;
        book.bids = [];
        book.asks = [];
        _.each(bookJson.bids, function (_a) {
            var price = _a[0], amount = _a[1];
            book.bids.push([new bignumber_js_1.default(price), new bignumber_js_1.default(amount)]);
        });
        _.each(bookJson.asks, function (_a) {
            var price = _a[0], amount = _a[1];
            book.asks.push([new bignumber_js_1.default(price), new bignumber_js_1.default(amount)]);
        });
        return book;
    };
    return OrderBookSnapshot;
}());
exports.OrderBookSnapshot = OrderBookSnapshot;
var priceLevelSortAsc = function (a, b) { return a.price.gt(b.price) ? 1 : (a.price.eq(b.price) ? 0 : -1); };
var priceLevelSortDesc = function (a, b) { return a.price.gt(b.price) ? -1 : (a.price.eq(b.price) ? 0 : 1); };
var OrderBook = /** @class */ (function () {
    function OrderBook(token, api) {
        this.sequence = -1;
        this.bids = new bintrees_1.RBTree(priceLevelSortAsc);
        this.asks = new bintrees_1.RBTree(priceLevelSortDesc);
        this.api = api;
        this.token = token;
    }
    OrderBook.prototype.init = function () {
        return __awaiter(this, void 0, void 0, function () {
            var _this = this;
            var snapshot, event;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        this.eventQueue = [];
                        this.initSocket();
                        return [4 /*yield*/, this.api.getBook(this.token.pair())];
                    case 1:
                        snapshot = _a.sent();
                        snapshot.bids.forEach(function (_a) {
                            var price = _a[0], amount = _a[1];
                            _this.onChange({ sequence: snapshot.sequence, type: 'bids', price: new bignumber_js_1.default(price), changedAmount: new bignumber_js_1.default(amount), orderId: "" });
                        });
                        snapshot.asks.forEach(function (_a) {
                            var price = _a[0], amount = _a[1];
                            _this.onChange({ sequence: snapshot.sequence, type: 'asks', price: new bignumber_js_1.default(price), changedAmount: new bignumber_js_1.default(amount), orderId: "" });
                        });
                        this.sequence = snapshot.sequence;
                        while (this.eventQueue.length > 0) {
                            event = this.eventQueue[0];
                            this.eventQueue.shift();
                            if (event.sequence <= this.sequence)
                                continue;
                            if (event.sequence - 1 !== this.sequence) {
                                // console.log("error happened!!!!") // TODO
                                break;
                            }
                            // console.log("onBookChange Pending event dispatched:", event)
                            this.onChange(event);
                        }
                        return [2 /*return*/];
                }
            });
        });
    };
    OrderBook.prototype.initSocket = function () {
        var _this = this;
        var socket = io(this.api.serverURL);
        this.socket = socket;
        socket.on('connect', function () {
            socket.emit('changeTradingPair', _this.token.pair());
        });
        socket.on("onBookChange", function (eventJson) {
            var event = OnBookChangeEvent.fromJSON(eventJson);
            // console.log(eventJson, event.sequence, this.sequence)
            if (_this.sequence === -1) {
                _this.eventQueue.push(event);
                return;
            }
            if (_this.sequence !== event.sequence - 1) {
                _this.socket.disconnect();
                _this.init();
                return;
            }
            _this.onChange(event);
        });
    };
    OrderBook.prototype.onChange = function (event) {
        var tree = (event.type === "bids") ? this.bids : this.asks;
        var priceLevel = tree.find({ price: event.price, amount: new bignumber_js_1.default('0') });
        if (!priceLevel) {
            priceLevel = { price: event.price, amount: new bignumber_js_1.default('0') };
            tree.insert(priceLevel);
        }
        priceLevel.amount = priceLevel.amount.add(event.changedAmount);
        if (priceLevel.amount.lte('0')) {
            tree.remove(priceLevel);
        }
        this.sequence = event.sequence;
    };
    OrderBook.prototype.print = function () {
        console.log('---asks---');
        this.asks.each(function (priceLevel) {
            console.log(priceLevel.price.toFixed(4) + " " + priceLevel.amount.toFixed(4));
        });
        console.log('---bids---');
        this.bids.each(function (priceLevel) {
            console.log(priceLevel.price.toFixed(4) + " " + priceLevel.amount.toFixed(4));
        });
        console.log('----------');
    };
    return OrderBook;
}());
exports.OrderBook = OrderBook;
